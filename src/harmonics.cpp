#include <iostream>
#include <memory>
#include <vector>
#include <string>

using std::shared_ptr;
using std::vector;
using std::string;

#include "speech/raw_data/WaveFileDataSource.h"

using speech::raw_data::DataSource;
using speech::raw_data::WaveFileDataSource;

#include "speech/LanguageModel.h"

using speech::LanguageModel;

#include "speech/vectorizer/ThirdsPowerVectorizer.h"

using speech::vectorizer::IVectorizer;
using speech::vectorizer::ThirdsPowerVectorizer;

#include "speech/clustering/KMeans.h"

using speech::clustering::IClusteringMethod;
using speech::clustering::KMeans;

#include "speech/spelling/HMM.h"

using speech::spelling::ISpellingTranscription;
using speech::spelling::HMM;

/**
 * Spectrum is a squared magnitude of the FFT.
 * @see http://en.wikipedia.org/wiki/Spectrogram
 */
int main(int argc, char **argv) {
    const int phonemesNumber = 4;   // number of phonemes generated by the clustering method
    const int sampleLength = 20;    // length in milliseconds

    shared_ptr<IVectorizer<short>> vectorizer =
            shared_ptr<IVectorizer<short>>(new ThirdsPowerVectorizer<short>());
    shared_ptr<IClusteringMethod> clusteringMethod =
            shared_ptr<IClusteringMethod>(new KMeans(phonemesNumber, vectorizer->getVectorSize()));
    shared_ptr<ISpellingTranscription> spellingTranscription =
            shared_ptr<ISpellingTranscription>(new HMM(4, 10));
    LanguageModel<short> languageModel(vectorizer,
                                       clusteringMethod,
                                       spellingTranscription);

    vector<DataSource<short>> dataSources;
    dataSources.push_back(WaveFileDataSource<short>("/home/kacper/voice/dziadzio.wav", sampleLength));

    vector<string> transcriptions;
    transcriptions.push_back("dziadzio");

    languageModel.fit(dataSources, transcriptions);
    languageModel.predict(dataSources[0]);

    return 0;
}